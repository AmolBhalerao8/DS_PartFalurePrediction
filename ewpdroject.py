# -*- coding: utf-8 -*-
"""EWpdroject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16m1fxM0lKv_47WGVbBujGxepDr2XALJ3

1st Test Case Scenario
"""

import pandas as pd
import numpy as np
#from google.colab import files
import matplotlib.pyplot as plt
import seaborn as sns
import joblib

#data = files.upload()

data1 = pd.read_excel('Dataset.xlsx', sheet_name='Dealers', usecols=['Dealer_ID', 'Dealer_Name'])
data2 = pd.read_excel('Dataset.xlsx', sheet_name='Claims', usecols=['Dealer_ID', 'Part_ID', 'Repair_or_Replace'])

a = pd.DataFrame(data1)
b = pd.DataFrame(data2)

c = pd.DataFrame(b.value_counts('Dealer_ID').head(10))

print(c)

d = pd.DataFrame(data = c)

e = d.merge(a, how= 'inner', on= 'Dealer_ID')

f = e.rename(columns={"Dealer_ID":"DealerID",0:"countss","Dealer_Name":"DealerName"})

f

plt.figure(figsize=(20, 6))
plt.bar(x=e['Dealer_Name'].head(10), height=e[0].head(10) )

plt.title('top 10 Dealers are', size=15)
plt.xlabel('Dealer_Name', size=15)
plt.ylabel('Count', size=15)

#plt.savefig('Top10dealer.png')
plt.show()

data3 = pd.read_excel('Dataset.xlsx',sheet_name='Claims',usecols=['Part_ID','claim_date','Cust_ID','Repair_or_Replace'])
data4 = pd.read_excel('Dataset.xlsx',sheet_name='Parts',usecols=['Part_ID','Manf_Date'])

data5 = data3.merge(data4, how='inner', on='Part_ID')

age = data5['claim_date'] - data5['Manf_Date']

data5['claim_date'] = data5['claim_date'].dt.strftime('%Y-%m')

"""***Addition of new column with same length

"""

data5['age'] = age

data5



d3 = pd.DataFrame(data = data5, columns=['claim_date', 'Part_ID'])

d3

plt.figure(figsize=(15, 6))
sns.countplot(x = d3['claim_date'], hue=d3['Part_ID'])
plt.title('Monthly Report', size = 15)
#plt.savefig('Monthly_Report_Failed_parts')
plt.show()

"""2nd Test Case Scenario"""

age

data6 = pd.read_excel('Dataset.xlsx', sheet_name='Customers', usecols=['City','Cust_ID'])

data7 = data5.merge(data6, how='inner', on='Cust_ID')

data7

print(data7['City'].unique())

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

data7['City'] = le.fit_transform(data7['City'])
print(data7['City'].unique())
repair_replace = pd.get_dummies(data7['Repair_or_Replace'], drop_first=True)

data7 = pd.concat([data7, repair_replace],axis=1)

data7.drop(['claim_date', 'Manf_Date', 'Repair_or_Replace'], axis=1, inplace=True)

data7.info()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression

data8 = data7.rename(columns={"rpr":"repair"})

"""***Conversion of deltatime to integer [days were converted ]

"""

data8['days'] = data8['age'].dt.days

data8.drop(['age'], axis=1, inplace=True)

data8.corr()

data9 = data8.drop(['Cust_ID'], axis = 1)

data9

joblib.dump(data9, 'LRtrain.pkl')

x_train, x_test, y_train, y_test = train_test_split(data9.drop(['repair'], axis=1), data9['repair'], train_size=0.8)

logmodel = LogisticRegression()

logmodel.fit(x_train, y_train)

y_pred = logmodel.predict(x_test)

y_pred

from sklearn.metrics import confusion_matrix, accuracy_score

confusion_matrix(y_test, y_pred)

(2856+48)/(2856+48+1071+44)

accuracy_score(y_test, y_pred)


"""3rd Test Case Scenario
Decision Tree
"""


from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

scaler.fit(data9.drop(['repair'], axis=1))

scaled_feature = scaler.transform(data9.drop(['repair'], axis=1))

scaled_feature

df_feat = pd.DataFrame(scaled_feature,columns=['Part_ID', 'City', 'days'])

df_feat

joblib.dump(df_feat, 'df_feat.pkl')

from sklearn.tree import DecisionTreeClassifier

dtc = DecisionTreeClassifier()

#x_train , x_test, y_train, y_test = train_test_split(data8.drop(['repair'], axis=1),data8['repair'], train_size=0.8 )
x_train , x_test, y_train, y_test = train_test_split(df_feat,data9['repair'], train_size=0.8 )

dtc.fit(x_train, y_train)

y_pred = dtc.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score

cm = confusion_matrix(y_test, y_pred)

cm

(2510+359)/(2519+359+415+735)

accuracy_score(y_pred,y_test)

"""Random Forest"""

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()

rfc.fit(x_train, y_train)

rfc_pred = rfc.predict(x_test)

rfc_cm = confusion_matrix(y_test, rfc_pred)

rfc_cm

(2511+405)/(2511+405+443+660)

accuracy_score(y_test, rfc_pred)